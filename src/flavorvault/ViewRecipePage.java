package flavorvault;

    import flavorvault.LandingPage;
    import flavorvault.LandingPage;
    import flavorvault.RecipePage;
    import flavorvault.RecipePage;
    import flavorvault.SessionManager;
    import flavorvault.SessionManager;
    import java.awt.event.MouseAdapter;
    import java.awt.event.MouseEvent;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import javax.swing.JOptionPane;
    import javax.swing.table.DefaultTableModel;

public class ViewRecipePage extends javax.swing.JFrame {
    static int savedRowHeight = 30;
    private boolean deletingMode = false;
    private String username;
    
    
    public ViewRecipePage() {
        initComponents();
        setLocationRelativeTo(null);
        RecipeCategory.setSelectedIndex(0);
        loadRecipeNames();
        RecipeList.setRowHeight(savedRowHeight);
    }
    
    public ViewRecipePage(String username){
        initComponents();
        this.username = username;
        RecipeList.setRowHeight(savedRowHeight);
        setLocationRelativeTo(null);
        loadRecipeNames();
        
    RecipeList.addMouseListener(new MouseAdapter() {
             public void mouseClicked(MouseEvent e) {
            RecipeListMouseClicked(e); // directly call your method
        }
        });
    }
    
     public void setRowHeight(int newHeight) {
        savedRowHeight = newHeight;
        RecipeList.setRowHeight(newHeight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        RecipeCategory = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        RecipeList = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JLabel();
        HomeButton = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 246, 236));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Select Category");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 140, 30));

        RecipeCategory.setBackground(new java.awt.Color(255, 255, 255));
        RecipeCategory.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        RecipeCategory.setForeground(new java.awt.Color(0, 0, 0));
        RecipeCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Recipes", "Main Dishes", "Appetizers", "Side Dishes", "Soups", "Salads", "Desserts", "Snacks", "Beverages", "Sauces & Dips", "Breakfast", "Lunch", "Dinner" }));
        RecipeCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecipeCategoryActionPerformed(evt);
            }
        });
        jPanel1.add(RecipeCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 180, 34));

        RecipeList.setBackground(new java.awt.Color(255, 255, 255));
        RecipeList.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        RecipeList.setForeground(new java.awt.Color(0, 0, 0));
        RecipeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "No.", "Recipe Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RecipeList.setGridColor(new java.awt.Color(0, 0, 0));
        RecipeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecipeListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(RecipeList);
        if (RecipeList.getColumnModel().getColumnCount() > 0) {
            RecipeList.getColumnModel().getColumn(0).setResizable(false);
            RecipeList.getColumnModel().getColumn(0).setPreferredWidth(90);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 66, 910, 440));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 960, 540));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Logo with Text.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 20, -1, -1));

        DeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Delete Button.png"))); // NOI18N
        DeleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteButtonMouseClicked(evt);
            }
        });
        getContentPane().add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 70, -1, -1));

        HomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Home Button.png"))); // NOI18N
        HomeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HomeButtonMouseEntered(evt);
            }
        });
        getContentPane().add(HomeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Background Image.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1160, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadRecipeNames() {
        int userId = SessionManager.getCurrentUserId();
        String selectedCategory = (String) RecipeCategory.getSelectedItem();

        String url = "jdbc:mysql://localhost:3306/flavor_vault";
        String dbUser = "root";
        String dbPass = "8472252Adrielle!";

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, dbUser, dbPass);

            String sql;
            PreparedStatement stmt;

            if (selectedCategory.equals("All Recipes")) {
                // No filter: show all recipes by this user
                sql = "SELECT name FROM recipes WHERE user_id = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setInt(1, userId);
            } else {
                // Filter by selected category
                sql = "SELECT r.name " +
                      "FROM recipes r " +
                      "JOIN categories c ON r.category_id = c.category_id " +
                      "WHERE r.user_id = ? AND c.name = ?";
                stmt = conn.prepareStatement(sql);
                stmt.setInt(1, userId);
                stmt.setString(2, selectedCategory);
            }

            ResultSet rs = stmt.executeQuery();

            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(new String[]{"No.", "Recipe Name"});

            int rowNumber = 1;
            while (rs.next()) {
                String recipeName = rs.getString("name");
                model.addRow(new Object[]{rowNumber++, recipeName});
            }

            RecipeList.setModel(model);

            rs.close();
            stmt.close();
            conn.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading recipes: " + e.getMessage());
            e.printStackTrace();
        }
}

    private void openRecipePage(String recipeName) {
    int userId = SessionManager.getCurrentUserId();
    String url = "jdbc:mysql://localhost:3306/flavor_vault";
    String dbUser  = "root";
    String dbPass = "8472252Adrielle!";

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection conn = DriverManager.getConnection(url, dbUser , dbPass);

        // Include recipe_id in your SELECT statement
        String sql = "SELECT recipe_id, name, ingredients, instructions " +
                     "FROM recipes r " +
                     "WHERE name = ? AND user_id = ?";

        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, recipeName);
        stmt.setInt(2, userId);


        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            int recipeId = rs.getInt("recipe_id"); // ✅ Get the recipe_id
            String title = rs.getString("name");
            String ingredients = rs.getString("ingredients");
            String instructions = rs.getString("instructions");

            // ✅ Create and set up RecipePage
            RecipePage recipePage = new RecipePage();
            recipePage.setRecipeId(recipeId); // ✅ Set the recipe ID
            recipePage.setRecipeTitle(title);
            recipePage.setIngredients(ingredients);
            recipePage.setInstructions(instructions);
            recipePage.setVisible(true);
            this.dispose(); // Close the current page if needed
        }

        rs.close();
        stmt.close();
        conn.close();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading recipe details: " + e.getMessage());
        e.printStackTrace();
    }
}



    private void HomeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeButtonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_HomeButtonMouseEntered

    private void HomeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeButtonMouseClicked
        String username = SessionManager.getCurrentUsername();
        LandingPage home = new LandingPage(username);
        home.setUsername(username);
        home.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HomeButtonMouseClicked

    private void RecipeCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecipeCategoryActionPerformed
        loadRecipeNames();
    }//GEN-LAST:event_RecipeCategoryActionPerformed

    private void RecipeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecipeListMouseClicked
        int selectedRow = RecipeList.getSelectedRow();
        if (selectedRow != -1) {
            String recipeName = (String) RecipeList.getValueAt(selectedRow, 1);

        if (deletingMode) {
            confirmAndDelete(recipeName);
            deletingMode = false; // Reset mode after deletion
        } else {
            openRecipePage(recipeName);
        }
    }
    }//GEN-LAST:event_RecipeListMouseClicked

    private void DeleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteButtonMouseClicked
        if (RecipeList.getSelectedRow() == -1) {
        deletingMode = true; // Wait for user to select a row
        JOptionPane.showMessageDialog(this, "Please select a recipe to delete.");
        } else {
        // already selected, delete immediately
        String recipeName = (String) RecipeList.getValueAt(RecipeList.getSelectedRow(), 1);
        confirmAndDelete(recipeName);
    }
    }//GEN-LAST:event_DeleteButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRecipePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DeleteButton;
    private javax.swing.JLabel HomeButton;
    private javax.swing.JComboBox<String> RecipeCategory;
    private javax.swing.JTable RecipeList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

private void confirmAndDelete(String recipeName) {
    int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete the recipe: " + recipeName + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        deleteRecipeByName(recipeName);
        loadRecipeNames(); // Refresh the list
    }
}

private void deleteRecipeByName(String recipeName) {
    String url = "jdbc:mysql://localhost:3306/flavor_vault";
    String dbUser = "root";
    String dbPass = "8472252Adrielle!";

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection conn = DriverManager.getConnection(url, dbUser, dbPass);

        String sql = "DELETE FROM recipes WHERE name = ? AND user_id = ?";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, recipeName);
        stmt.setInt(2, SessionManager.getCurrentUserId());

        int rowsAffected = stmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Recipe deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to delete the recipe.");
        }

        stmt.close();
        conn.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error deleting recipe: " + e.getMessage());
        e.printStackTrace();
        }
    }
}


