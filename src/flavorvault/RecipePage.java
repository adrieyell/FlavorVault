package flavorvault;

import flavorvault.ViewRecipePage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Asus
 */
public class RecipePage extends javax.swing.JFrame {
    private int recipeId;
    public RecipePage() {
        initComponents();
        SaveButton.setEnabled(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackButton = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        RecipeTitle = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        InstructionsField = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        IngredientsField = new javax.swing.JTextArea();
        EditButton = new javax.swing.JButton();
        HomeButton = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BackButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Back Button.png"))); // NOI18N
        BackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackButtonMouseClicked(evt);
            }
        });
        getContentPane().add(BackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 246, 236));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        RecipeTitle.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        RecipeTitle.setForeground(new java.awt.Color(0, 0, 0));
        RecipeTitle.setText("Title");
        jPanel1.add(RecipeTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 840, 49));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Instructions");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 110, 20));

        SaveButton.setBackground(new java.awt.Color(0, 0, 0));
        SaveButton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        SaveButton.setForeground(new java.awt.Color(255, 255, 255));
        SaveButton.setText("SAVE");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(SaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 440, 110, 40));

        InstructionsField.setEditable(false);
        InstructionsField.setColumns(20);
        InstructionsField.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        InstructionsField.setLineWrap(true);
        InstructionsField.setRows(5);
        InstructionsField.setWrapStyleWord(true);
        jScrollPane2.setViewportView(InstructionsField);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 470, 340));

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Ingredients");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 110, 30));

        IngredientsField.setEditable(false);
        IngredientsField.setColumns(20);
        IngredientsField.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        IngredientsField.setLineWrap(true);
        IngredientsField.setRows(5);
        IngredientsField.setWrapStyleWord(true);
        jScrollPane3.setViewportView(IngredientsField);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 350, 340));

        EditButton.setBackground(new java.awt.Color(229, 229, 229));
        EditButton.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        EditButton.setForeground(new java.awt.Color(0, 0, 0));
        EditButton.setText("EDIT");
        EditButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditButtonMouseClicked(evt);
            }
        });
        jPanel1.add(EditButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 440, 110, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 880, 500));

        HomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Home Button.png"))); // NOI18N
        HomeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HomeButtonMouseClicked(evt);
            }
        });
        getContentPane().add(HomeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 60, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Logo with Text.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Background Image.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1160, 750));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setRecipeId(int id){
        this.recipeId = id;
    }
    
        public void setRecipeTitle(String title) {
        RecipeTitle.setText(title);
    }
        
    // Setter for the ingredients JTextArea
    public void setIngredients(String ingredients) {
        IngredientsField.setText(ingredients);
    }
    
    // Setter for the instructions JTextArea
    public void setInstructions(String instructions) {
        InstructionsField.setText(instructions);
    }
    
    public void loadRecipe(int id){
        setRecipeId(id);
        String url = "jdbc:mysql://localhost:3306/flavor_vault";
        String dbUser = "root";
        String dbPass = "8472252Adrielle!";

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, dbUser, dbPass);

            String query = "SELECT recipe_title, ingredients, instructions FROM recipes WHERE recipe_id = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(4, SessionManager.getCurrentUserId());

            var rs = stmt.executeQuery();

            if (rs.next()) {
                String fetchedTitle = rs.getString("recipe_title");
                String fetchedIngredients = rs.getString("ingredients");
                String fetchedInstructions = rs.getString("instructions");

                setRecipeTitle(fetchedTitle);
                setIngredients(fetchedIngredients);
                setInstructions(fetchedInstructions);
            } else {
                JOptionPane.showMessageDialog(this, "Recipe not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading recipe: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    
    
    private void HomeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeButtonMouseClicked
        // TODO add your handling code here:
        String username = SessionManager.getCurrentUsername();
        LandingPage home = new LandingPage(username);
        home.setUsername(username);
        home.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_HomeButtonMouseClicked

    private void BackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackButtonMouseClicked
        ViewRecipePage.savedRowHeight = 30;
        ViewRecipePage back = new ViewRecipePage();
        back.setVisible(true);  
        this.dispose();
    }//GEN-LAST:event_BackButtonMouseClicked

    private void EditButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditButtonMouseClicked
        IngredientsField.setEditable(true);
        InstructionsField.setEditable(true);
        SaveButton.setEnabled(true);
        EditButton.setEnabled(false);
    }//GEN-LAST:event_EditButtonMouseClicked

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
          String ingredients = IngredientsField.getText().trim();
          String instructions = InstructionsField.getText().trim();

          // Validate input
          if (ingredients.isEmpty() || instructions.isEmpty()) {
              JOptionPane.showMessageDialog(this, "Please fill out all fields.", "Input Error", JOptionPane.WARNING_MESSAGE);
              return;
          }

          // Get current user info from SessionManager
          int currentUserId = SessionManager.getCurrentUserId();
          String currentUsername = SessionManager.getCurrentUsername();

          // Debug output
          System.out.println("DEBUG: Current username: " + currentUsername);
          System.out.println("DEBUG: Current user ID: " + currentUserId);
          System.out.println("DEBUG: Recipe ID: " + recipeId);

          if (currentUserId <= 0) {
              JOptionPane.showMessageDialog(this, "User session not found. Please log in again.", "Session Error", JOptionPane.ERROR_MESSAGE);
              return;
          }

          if (recipeId <= 0) {
              JOptionPane.showMessageDialog(this, "Recipe ID not set. Please reload the recipe.", "Error", JOptionPane.ERROR_MESSAGE);
              return;
          }

          // Database connection setup
          String url = "jdbc:mysql://localhost:3306/flavor_vault";
          String dbUser = "root";
          String dbPass = "8472252Adrielle!";

          try {
              Class.forName("com.mysql.cj.jdbc.Driver");
              try (Connection conn = DriverManager.getConnection(url, dbUser, dbPass)) {

                  // First, check if the recipe belongs to the current user
                  String checkOwnershipQuery = "SELECT user_id FROM recipes WHERE recipe_id = ?";
                  try (PreparedStatement checkStmt = conn.prepareStatement(checkOwnershipQuery)) {
                      checkStmt.setInt(1, recipeId);
                      var checkRs = checkStmt.executeQuery();

                      if (checkRs.next()) {
                          int recipeOwnerId = checkRs.getInt("user_id");
                          System.out.println("DEBUG: Recipe owner ID: " + recipeOwnerId);

                          if (recipeOwnerId != currentUserId) {
                              JOptionPane.showMessageDialog(this, "You don't have permission to edit this recipe.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
                              return;
                          }
                      } else {
                          JOptionPane.showMessageDialog(this, "Recipe not found.", "Error", JOptionPane.ERROR_MESSAGE);
                          return;
                      }
                  }

                  // Update the recipe (we already verified ownership above)
                     String sql = "UPDATE recipes SET ingredients = ?, instructions = ? WHERE recipe_id = ? AND user_id = ?";
                  try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                      stmt.setString(1, ingredients);
                      stmt.setString(2, instructions);
                      stmt.setInt(3, recipeId);
                      stmt.setInt(4, currentUserId); 

                      int rowsUpdated = stmt.executeUpdate();
                      System.out.println("DEBUG: Rows updated: " + rowsUpdated);

                      if (rowsUpdated > 0) {
                          JOptionPane.showMessageDialog(this, "Recipe updated successfully!");
                          IngredientsField.setEditable(false);
                          InstructionsField.setEditable(false);
                          SaveButton.setEnabled(false);
                          EditButton.setEnabled(true);
                      } else {
                          JOptionPane.showMessageDialog(this, "Failed to update recipe. No rows were affected.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                      }
                  }
              }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
                e.printStackTrace();
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(RecipePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecipePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecipePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JLabel HomeButton;
    private javax.swing.JTextArea IngredientsField;
    private javax.swing.JTextArea InstructionsField;
    private javax.swing.JLabel RecipeTitle;
    private javax.swing.JButton SaveButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    void loadRecipeForEditing(String selectedRecipeName) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

        private void setString(int i, String ingredients) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private void setInt(int i, int recipeId) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private int executeUpdate() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        private void close() {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

    void setRecipeId() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
